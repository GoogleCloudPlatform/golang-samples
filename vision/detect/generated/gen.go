// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//+build ignore

package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"strings"
)

func main() {
	tmpl, err := ioutil.ReadFile("generated/sample-template.go")
	if err != nil {
		log.Fatal("ReadFile:", err)
	}

	// strip build tag from the top of the file.
	start := bytes.Index(tmpl, []byte("package main"))
	tmpl = tmpl[start:]

	out := &bytes.Buffer{}

	// Header.
	fmt.Fprintln(out, header)

	normal := string(tmpl)
	normal = strings.Replace(normal, boilerplateSentinel, boilerplate, -1)
	normal = strings.Replace(normal, regionTagParameter, standardRegionTagParameterValue, -1)
	out.WriteString(normal)

	// Don't do imports twice.
	start = bytes.Index(tmpl, []byte("\nfunc "))
	tmpl = tmpl[start:]

	gcs := string(tmpl)
	gcs = strings.Replace(gcs, boilerplateSentinel, gcsBoilerplate, -1)
	gcs = strings.Replace(gcs, regionTagParameter, gcsRegionTagParameterValue, -1)
	// Append suffix to function name.
	gcs = strings.Replace(gcs, "(w io.Writer", "URI(w io.Writer", -1)
	out.WriteString(gcs)

	if err := ioutil.WriteFile("detect.go", out.Bytes(), 0640); err != nil {
		log.Fatal(err)
	}
}

const boilerplateSentinel = "\tvar client *vision.ImageAnnotatorClient // Boilerplate is inserted by gen.go\n"

const regionTagParameter = "{REGION_TAG_PARAMETER}"
const standardRegionTagParameterValue = ""
const gcsRegionTagParameterValue = "_gcs"

const boilerplate = `	ctx := context.Background()

	client, err := vision.NewImageAnnotatorClient(ctx)
	if err != nil {
		return err
	}

	f, err := os.Open(file)
	if err != nil {
		return err
	}
	defer f.Close()

	image, err := vision.NewImageFromReader(f)
	if err != nil {
		return err
	}
`
const gcsBoilerplate = `	ctx := context.Background()

	client, err := vision.NewImageAnnotatorClient(ctx)
	if err != nil {
		return err
	}

	image := vision.NewImageFromURI(file)
`

const header = `// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//go:generate go run generated/gen.go

// DO NOT EDIT THIS FILE.
// It is generated from the source in generated/sample-template.go
`
