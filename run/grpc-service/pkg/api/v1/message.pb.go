// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package message

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Content struct {
	Index                int32                `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Message              string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ReceivedOn           *timestamp.Timestamp `protobuf:"bytes,3,opt,name=received_on,json=receivedOn,proto3" json:"received_on,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}

func (m *Content) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Content.Unmarshal(m, b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Content.Marshal(b, m, deterministic)
}
func (m *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(m, src)
}
func (m *Content) XXX_Size() int {
	return xxx_messageInfo_Content.Size(m)
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Content) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Content) GetReceivedOn() *timestamp.Timestamp {
	if m != nil {
		return m.ReceivedOn
	}
	return nil
}

type Response struct {
	Content              *Content `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "message.Request")
	proto.RegisterType((*Content)(nil), "message.Content")
	proto.RegisterType((*Response)(nil), "message.Response")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8f, 0xb1, 0x4b, 0xc4, 0x30,
	0x18, 0xc5, 0x8d, 0x7a, 0x56, 0xbf, 0xa2, 0x68, 0x70, 0x28, 0x5d, 0x3c, 0xea, 0x52, 0x04, 0x73,
	0x52, 0x41, 0x07, 0x47, 0x67, 0x11, 0x52, 0x77, 0xe9, 0xb5, 0xcf, 0x52, 0xb0, 0x49, 0x6d, 0x72,
	0xe5, 0xfe, 0x7c, 0x31, 0x69, 0xf0, 0xdc, 0x1c, 0x5f, 0xf2, 0x7e, 0x7c, 0xbf, 0x47, 0xa7, 0x3d,
	0x8c, 0xa9, 0x5a, 0x88, 0x61, 0xd4, 0x56, 0xf3, 0x68, 0x8e, 0xe9, 0x55, 0xab, 0x75, 0xfb, 0x89,
	0x95, 0x7b, 0x5e, 0x6f, 0x3e, 0x56, 0xb6, 0xeb, 0x61, 0x6c, 0xd5, 0x0f, 0xbe, 0x99, 0x5d, 0x53,
	0x24, 0xf1, 0xb5, 0x81, 0xb1, 0x3c, 0xa1, 0x80, 0x25, 0x6c, 0xc9, 0xf2, 0x13, 0x19, 0x62, 0x36,
	0x51, 0xf4, 0xac, 0x95, 0x85, 0xb2, 0xfc, 0x92, 0x16, 0x9d, 0x6a, 0xb0, 0x75, 0x95, 0x85, 0xf4,
	0x61, 0x17, 0xdd, 0xff, 0x83, 0xf2, 0x27, 0x8a, 0x47, 0xd4, 0xe8, 0x26, 0x34, 0xef, 0x5a, 0x25,
	0x07, 0x4b, 0x96, 0xc7, 0x45, 0x2a, 0xbc, 0x96, 0x08, 0x5a, 0xe2, 0x2d, 0x68, 0x49, 0x0a, 0xf5,
	0x57, 0x95, 0x3d, 0xd0, 0xb1, 0x84, 0x19, 0xb4, 0x32, 0xe0, 0x37, 0x14, 0xd5, 0xde, 0xc1, 0x9d,
	0x8e, 0x8b, 0x73, 0x11, 0x36, 0xcf, 0x6e, 0x32, 0x14, 0x8a, 0x2d, 0x9d, 0xbd, 0xf8, 0xbf, 0x12,
	0xe3, 0xd4, 0xd5, 0xe0, 0xb7, 0x74, 0x58, 0x42, 0x35, 0xfc, 0x17, 0x9a, 0x57, 0xa7, 0x17, 0x3b,
	0x2f, 0xfe, 0x54, 0xb6, 0xc7, 0x1f, 0x89, 0x7e, 0xea, 0xa5, 0x1d, 0x51, 0xf5, 0xff, 0x84, 0x72,
	0x76, 0xc7, 0xd6, 0x47, 0x6e, 0xd1, 0xfd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x0f, 0xa9,
	0x72, 0x90, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageServiceClient interface {
	Send(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SendStream(ctx context.Context, opts ...grpc.CallOption) (MessageService_SendStreamClient, error)
}

type messageServiceClient struct {
	cc *grpc.ClientConn
}

func NewMessageServiceClient(cc *grpc.ClientConn) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) Send(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/message.MessageService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SendStream(ctx context.Context, opts ...grpc.CallOption) (MessageService_SendStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageService_serviceDesc.Streams[0], "/message.MessageService/SendStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceSendStreamClient{stream}
	return x, nil
}

type MessageService_SendStreamClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type messageServiceSendStreamClient struct {
	grpc.ClientStream
}

func (x *messageServiceSendStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceSendStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServiceServer is the server API for MessageService service.
type MessageServiceServer interface {
	Send(context.Context, *Request) (*Response, error)
	SendStream(MessageService_SendStreamServer) error
}

func RegisterMessageServiceServer(s *grpc.Server, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Send(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).SendStream(&messageServiceSendStreamServer{stream})
}

type MessageService_SendStreamServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type messageServiceSendStreamServer struct {
	grpc.ServerStream
}

func (x *messageServiceSendStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceSendStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _MessageService_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStream",
			Handler:       _MessageService_SendStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
