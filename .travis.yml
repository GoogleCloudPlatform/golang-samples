language: go

# Don't build other branches that are being used for PRs.
# Currently only the master branch is used in this repo.
branches:
  only:
    - master

matrix:
  include:
    - go: 1.6.3
      env: ALLOW_E2E=true # Don't run e2e tests more than once.
    - go: 1.7
    # NOTE: no tip, see https://github.com/travis-ci/gimme/issues/38

before_cache:
- rm -rf $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/*
- rm -rf $GOPATH/pkg/**/github.com/GoogleCloudPlatform/golang-samples

cache:
  directories:
    - $GOPATH/src
    - $GOPATH/pkg

before_install:
- if [ $SYSTEM_TESTS ]; then
    openssl aes-256-cbc -K $encrypted_e44ee91b46d4_key -iv $encrypted_e44ee91b46d4_iv -in key.json.enc -out key.json -d;
    export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/key.json";

    curl https://storage.googleapis.com/gimme-proj/linux_amd64/gimmeproj > gimmeproj && chmod +x gimmeproj;
    ./gimmeproj version;
    export GOLANG_SAMPLES_PROJECT_ID=$(./gimmeproj -project golang-samples-tests lease 12m);
    if [ -z "$GOLANG_SAMPLES_PROJECT_ID" ]; then
      echo "Lease failed.";
      exit 1;
    fi;
    echo "Running tests in project $GOLANG_SAMPLES_PROJECT_ID";
  else
    echo "Not running system tests.";
  fi
- if [ $ALLOW_E2E ]; then
    curl -s https://api.travis-ci.org/builds/$TRAVIS_BUILD_ID | jq . | tee /tmp/build.json;
    export NIGHTLY=$(jq '.event_type=="api" and (.message|contains("CIAEON=true"))' < /tmp/build.json);
    export FORCE_E2E=$(jq '.message|contains("FORCE_E2E=true")' < /tmp/build.json);
    if [ $NIGHTLY = "true" ] || [ $FORCE_E2E = "true" ]; then
      export GOLANG_SAMPLES_E2E_TEST=true;
    fi;
  fi
- if [ $GOLANG_SAMPLES_E2E_TEST ]; then
    echo "This test run will run end-to-end tests.";
    go get -u google.golang.org/appengine/cmd/aedeploy;
    export PATH="$PATH:$PWD/google-cloud-sdk/bin";
    ./testing/travis/configure_gcloud.bash;
  fi
- grep -R '"context"$' * && { echo "Use golang.org/x/net/context"; false; } || true
- go vet ./...
- diff -u <(echo -n) <(gofmt -d -s .)

install:
# Install all external dependencies, ensuring they are updated.
- go get -u -v $(go list -f '{{join .Imports "\n"}}' ./... | sort | uniq | grep -v golang-samples)

script:
- go test -v ./...
- ./gimmeproj -project golang-samples-tests done $GOLANG_SAMPLES_PROJECT_ID
